"0","library(lifecontingencies)"
"0",""
"0","#' Gestione Portafoglio"
"0","#' Dato un portafoglio, di rischi omogenei tra loro, la funzione calcola rendimento e andamento del fondo e i decessi "
"0","#'"
"0","#' @param numeroAssicurati "
"0","#' @param eta età degli assicurati"
"0","#' @param rata importo della rata annuale"
"0","#' @param fondoInizio importo iniziale del fondo"
"0","#' @param numeroPremi numero di premi che gli assicurati pagheranno"
"0","#' @param omega età massima raggiungibile"
"0","#' @param differimento rendita differita o immediata"
"0","#' @param temporanea rendita vitalizia o temporanea"
"0","#' @param anniCopertura anni di coperrtura nel caso di rendita temporanea"
"0","#' @param rateGarantiteDurata numero di rate garantite"
"0","#' @param rendimentoFondoAnnuo tasso di rendimento del fondo "
"0","#' @param tassoAleatorio tasso fisso o aleatorio"
"0","#' @param tavolaMortalita tavola di mortalità con cui calcolare il premio"
"0","#' @param tassoTecnico tasso usato per calcolare il premio"
"0","#' @param tavolaPeriodo tavola utilizzata per simulare i decessi all'interno del portafoglio"
"0","#'"
"0","#' @return"
"0","#' La funzione ritorna l'andamento e il rendimento del fondo, i decessi e il premio che ciascun assicurato dovrà pagare"
"0","#' "
"0","#' @export"
"0","#'"
"0","#' @examples"
"0","#' "
"0",""
"0","gestionePortafoglio = function(#input"
"0","  numeroAssicurati = 1000,"
"0","  eta = 20,"
"0","  rata = 1000,"
"0","  fondoInizio = 100000,"
"0","  numeroPremi = 15,"
"0","  omega = 110,"
"0","  differimento = 25,"
"0","  temporanea = FALSE,"
"0","  # temporanea o  vita intera"
"0","  anniCopertura = 35,"
"0","  rateGarantiteDurata = 5,"
"0","  rendimentoFondoAnnuo = 0.02,"
"0","  # tasso finanziario"
"0","  tassoAleatorio = TRUE,"
"0","  tavolaMortalita = demoIta$RG48M,"
"0","  #tavola utilizzata per la base tecnica"
"0","  tassoTecnico = 0.02,"
"0","  #tasso utilizzato per la base tecnica"
"0","  tavolaPeriodo = demoIta$SIM02) {"
"0","  # tavola utilizzata per calcolare i morti nel portafoglio"
"0","  # vengono inizializzati gli output"
"0","  andamentoFondo = NULL"
"0","  rendimentoFondo = NULL"
"0","  decessi = NULL"
"0","  # Fissiamo gli anni di copertura nel caso di una vitalizia"
"0","  if (!temporanea)"
"0","  {"
"0","    anniCopertura = omega - eta"
"0","  }"
"0","  "
"0","  calcoloVettoreTasso = function()"
"0","  {"
"0","    #il tasso si distribuisce come una normale"
"0","    ifelse(tassoAleatorio, return(rnorm("
"0","      anniCopertura, mean = rendimentoFondoAnnuo, sd = 0.01"
"0","    )), return(rep(rendimentoFondoAnnuo, anniCopertura)))"
"0","    # accettiamo la possibilità di deflazione nel caso del aleatorio"
"0","  }"
"0","  "
"0","  tassoFinanziario = calcoloVettoreTasso()"
"0","  "
"0","  # calcola quante persone muoiono nel fondo"
"0","  calcoloDecessi = function()"
"0","  {"
"0","    died = NULL"
"0","    for (i in eta:(anniCopertura + eta))"
"0","    {"
"0","      sopravissuti = numeroAssicurati - sum(died)"
"0","      #mu = probabilità di decesso nell'anno i condizionatamente che siano in vita all'anno i"
"0","      mu =  (tavolaPeriodo[i + 1] - ifelse(i > (omega - 2), 0, tavolaPeriodo[i +"
"0","                                                                               2])) / ifelse(i > (omega - 1), 1, tavolaPeriodo[i + 1])"
"0","      #genera i morti da una normale con media quelli che in linea teorica dovrebbero morire"
"0","      mortiCasuali = abs(rnorm(1, sopravissuti * mu, mu))"
"0","      #arrotonda agli interi il numero di morti e nel caso sia > dei sopravissuti, li uccide tutti"
"0","      died = round(c("
"0","        died,"
"0","        ifelse(mortiCasuali > sopravissuti, sopravissuti, mortiCasuali)"
"0","      ),"
"0","      digits = 0) #le persone sono interi e quindi si arrotonda a degli interi"
"0","    }"
"0","    return(died)"
"0","  }"
"0","  "
"0","  # calcola gli hPx tramite l_(x+h) / l_x"
"0","  hPx = function(h, x)"
"0","  {"
"0","    # il +1 è per compensare che in R i vettori partono da 1 mentre l'età parte da zero"
"0","    # ifelse serve a evitare il problema dell'età limite di andare fuori dal vettore"
"0","    return(ifelse(h + x > omega - 1, 0, tavolaMortalita[h + x + 1]) / tavolaMortalita[x + 1])"
"0","  }"
"0","  "
"0","  # assicurati vivi"
"0","  hAV = function(h)"
"0","    # indica al tempo t il numero di assicurati sopravissuti"
"0","  {"
"0","    return(numeroAssicurati - ifelse(h > 0, sum(decessi[1:h]), 0))"
"0","  }"
"0","  "
"0","  "
"0","  # PREMIO"
"0","  premio = function()"
"0","  {"
"0","    if (rateGarantiteDurata > 0)"
"0","    {"
"0","      p = rata * (sum((1 + tassoTecnico) ** -c((differimento + 1):(differimento + 1 + rateGarantiteDurata)"
"0","      )) + sum((1 + tassoTecnico) ** -c((differimento + 1 + rateGarantiteDurata):anniCopertura"
"0","      ) * hPx(c((differimento + 1 + rateGarantiteDurata):anniCopertura"
"0","      ), eta)))"
"0","      if (numeroPremi == 1)"
"0","      {"
"0","        return(p)"
"0","      } else"
"0","      {"
"0","        return(p / sum((1 + tassoTecnico) ** -c(0:("
"0","          numeroPremi - 1"
"0","        )) * hPx(c("
"0","          0:(numeroPremi - 1)"
"0","        ), eta))) # parte da zero perché la prima la pagano tutti"
"0","      }"
"0","    } else"
"0","    {"
"0","      p = rata * sum((1 + tassoTecnico) ** -(c(("
"0","        differimento + 1"
"0","      ):anniCopertura)) * hPx(c(("
"0","        differimento + 1"
"0","      ):anniCopertura), eta))"
"0","      "
"0","      if (numeroPremi == 1)"
"0","      {"
"0","        return(p)"
"0","      } else"
"0","      {"
"0","        return(p / sum((1 + tassoTecnico) ** -c(0:("
"0","          numeroPremi - 1"
"0","        )) * hPx(c("
"0","          0:(numeroPremi - 1)"
"0","        ), eta))) # parte da zero perché la prima la pagano tutti"
"0","      }"
"0","      "
"0","    }"
"0","    return(-1) # nel caso l'utente inserisca rate garantite negative. Sì potrebbe mettere un try and catch"
"0","  }"
"0","  "
"0","  # INIZIO ANDAMENTO E RENDIMENTO"
"0","  "
"0","  # calcolo dei vari decessi"
"0","  decessi = calcoloDecessi()"
"0","  "
"0","  #Utilizzo della forumula ricorsiva"
"0","  # incasso dei premi e differimento"
"0","  if (differimento > 0) {"
"0","    for (t in 1:(differimento))"
"0","    {"
"0","      andamentoFondo = c(andamentoFondo,"
"0","                         ("
"0","                           ifelse(t > numeroPremi, 0, hAV(t) * premio()) +"
"0","                             ifelse(t > 1, andamentoFondo[t -"
"0","                                                            1], fondoInizio)"
"0","                         ) * (1 + tassoFinanziario[t]))"
"0","      rendimentoFondo = c(rendimentoFondo,"
"0","                          andamentoFondo[t] - ifelse(t > 1, andamentoFondo[t - 1], fondoInizio))"
"0","    }"
"0","  }"
"0","  "
"0","  # calcolo del fondo dall'inizio del pagamento delle rate"
"0","  for (t in (differimento + 1):(anniCopertura))"
"0","  {"
"0","    andamentoFondo = c(andamentoFondo, ("
"0","      ifelse("
"0","        t > 1,"
"0","        andamentoFondo[t - 1],"
"0","        fondoInizio + premio() * numeroAssicurati"
"0","      ) -"
"0","        ("
"0","          rata * ifelse((t - differimento) > rateGarantiteDurata,"
"0","                        hAV(t + 1),"
"0","                        numeroAssicurati"
"0","          )"
"0","        )"
"0","    ) * (1 + tassoFinanziario[t]))"
"0","    rendimentoFondo = c(rendimentoFondo,"
"0","                        andamentoFondo[t] - ifelse(t > 1, andamentoFondo[t - 1], fondoInizio))"
"0","  }"
"0","  "
"0","  #Creazione dell'oggetto che la funzione dovrà tornare"
"0","  Output = new.env()"
"0","  Output$andamentoFondo = andamentoFondo"
"0","  Output$rendimentoFondo = rendimentoFondo"
"0","  Output$decessi = decessi"
"0","  Output$premio = premio()"
"0","  "
"0","  return(Output)"
"0","  "
"0","}"
"0",""
